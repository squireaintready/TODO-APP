{"version":3,"sources":["Components/Todo.js","Components/TodoList.js","Components/NewTodo.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","toggleComplete","removeTodo","styleCompleted","color","textDecoration","completed","opacity","handleCheckboxClick","id","style","display","ListItem","onClick","Checkbox","checked","type","Typography","variant","task","IconButton","TodoList","todos","List","map","key","NewTodo","addTodo","useState","setTodo","marginTop","className","onSubmit","e","preventDefault","trim","uuidv4","TextField","label","name","placeholder","value","onChange","target","Button","Header","backgroundColor","padding","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e9623973.chunk.js","sourcesContent":["import { Checkbox, IconButton, ListItem, Typography } from '@material-ui/core'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport React from 'react'\r\n\r\nexport default function Todo({ todo, toggleComplete, removeTodo }) {\r\n\r\n    const styleCompleted = {\r\n        color: 'white',\r\n        textDecoration: todo.completed ? 'line-through' : null,\r\n        opacity: todo.completed ? .5 : 1,\r\n    }\r\n\r\n    function handleCheckboxClick() {\r\n        toggleComplete(todo.id)\r\n    }\r\n\r\n    function handleRemoveClick() {\r\n        removeTodo(todo.id)\r\n    }\r\n\r\n    return (\r\n        <div style={{display:'flex'}}>\r\n            <ListItem onClick={handleCheckboxClick} >\r\n                <Checkbox\r\n                    checked={todo.completed}\r\n                    type='checkbox'\r\n                    onClick={handleCheckboxClick}\r\n                />\r\n                <Typography\r\n                    variant='body1'\r\n                    style={styleCompleted}\r\n                >\r\n                    {todo.task}\r\n                </Typography>\r\n            </ListItem>\r\n            \r\n            <IconButton onClick={handleRemoveClick}>\r\n                <CloseIcon />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\n// const styleExitBtn = {\r\n//     position: \"absolute\",\r\n//     right: '6em',\r\n//     borderRadius: \"50%\",\r\n// }","import {List} from '@material-ui/core'\r\nimport React from 'react'\r\nimport Todo from './Todo'\r\n\r\n\r\nexport default function TodoList({todos, toggleComplete, removeTodo}) {\r\n    return (\r\n            <List>\r\n                {todos.map(todo =>(\r\n                    <Todo \r\n                        key={todo.id} \r\n                        todo={todo} \r\n                        toggleComplete={toggleComplete}\r\n                        removeTodo = {removeTodo}\r\n                    />\r\n                ))}\r\n            </List>\r\n    )\r\n}\r\n\r\n\r\n\r\n// export default class TodoList extends Component {\r\n//     constructor() {\r\n//         super();\r\n//         this.state = {\r\n//             isChecked:false,\r\n//             todos: []\r\n//         }\r\n//     }\r\n\r\n//     handleChange = () =>{\r\n//         let isCheckedHelper = !this.state.isChecked\r\n//         this.setState({\r\n//             isChecked: isCheckedHelper\r\n//         })\r\n//     }\r\n\r\n//     addItem = (event) =>{\r\n//         this.setState({\r\n//             todos : event.target.value \r\n//         })\r\n//     }\r\n\r\n//     render() {\r\n//         const styleTodoList = {\r\n//             display: 'inline-block'\r\n//         }\r\n\r\n\r\n\r\n//         return (\r\n//             <div>\r\n//                 <input\r\n//                     type='checkbox'\r\n//                     checked={this.state.isChecked}\r\n//                     onChange={this.handleChange}\r\n//                     style={styleTodoList}\r\n//                 />\r\n//                 <p style={styleTodoList}>Item One</p>\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n","import {Button, TextField} from '@material-ui/core'\r\nimport React, {useState} from 'react'\r\nimport {v4 as uuidv4} from 'uuid'\r\n//const { uuid } = require('uuidv4');\r\n\r\nexport default function NewTodo({addTodo}) {\r\n    const[todo, setTodo] = useState({\r\n        id:'',\r\n        task:'',\r\n        completed: false,\r\n    })\r\n\r\n    function handleNewTodoChange(e){\r\n        setTodo({\r\n            ...todo,\r\n            task: e.target.value\r\n        })\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault()\r\n        if(todo.task.trim()){\r\n            addTodo({\r\n                ...todo,\r\n                id: uuidv4()\r\n            })\r\n            setTodo({\r\n                ...todo,\r\n                task: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    const inputStyles = {\r\n        marginTop: '20px',\r\n        color:'white'\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={inputStyles}>\r\n            <form className='todo-form' onSubmit = {handleSubmit}>\r\n                <TextField\r\n                    label='Task'\r\n                    name='task'\r\n                    type='text'\r\n                    placeholder='Add new item'\r\n                    value={todo.task}\r\n                    onChange={handleNewTodoChange}\r\n                />\r\n                <Button type='submit'>ADD</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\nexport default function Header() {\r\n    const headerStyles = {\r\n        backgroundColor: '#AAAAAA',\r\n    }\r\n\r\n    return (\r\n        <div style ={headerStyles}>\r\n            <Typography style={{ padding: 16 }} variant='h1'>\r\n                Listronic by Sam Jo\r\n            </Typography>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport TodoList from './Components/TodoList';\nimport NewTodo from './Components/NewTodo';\nimport Header from './Components/Header'\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n\n  const LOCAL_STORAGE_KEY = 'react-todo-list-todos'\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos])\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    )\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  return (\n    <div className=\"App\">\n      <Header/>\n\n      <NewTodo addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        toggleComplete={toggleComplete}\n        removeTodo={removeTodo}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}